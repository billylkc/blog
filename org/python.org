#+STARTUP: content
#+OPTIONS: \n:t
#+OPTIONS: ^:{}
#+HTML_HEAD: <base target="_blank">
#+hugo_base_dir: ../
#+hugo_section: ./posts

#+hugo_weight: auto
#+hugo_auto_set_lastmod: t

#+author: Billy Lam

* Python                                                                :@python:python:

** TODO Getting HKEX data with Quandl in Python                        :api:
:PROPERTIES:
:EXPORT_FILE_NAME: hkex-with-python
:EXPORT_DATE: 2021-06-21
:EXPORT_HUGO_MENU: :menu "main"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nolastmod true :cover
:DESCRIPTION: Getting HKEX data with Quandl in Python. Historical daily HKEX data using API. Yahoo Finance.
:EXPORT_TITLE: Getting HKEX data with Quandl in Python
:SUMMARY: Getting HKEX data with Quandl in Python
:END:

Free alternatives to get HKEX daily stock data after Yahoo Finance

<!--more-->

*** Introduction
Free Quandl Stock API for HK stock data.

Getting a stable source of daily stock data is all I wanted. But since Yahoo Finance shutdown their API, I have been using Quandl as an free alternatives. In this post, I will quickly show you how we can get some daily stock price data from HK Stock Exchange Market.

*** Overview

In this article, we will be covering the following topics

- Introduction to Quandl Python API

- Basic setup and quick exploration

- Getting 10 days of records for all stocks

- Set up a cron job to extract the data daily

*** Quandl Python API
**Quandl** is a marketplace for financial, economic and alternative data delivered in
modern formats for today's financial analysts It provides free API (Python, Excel, Matlab, R, etc..) for registered users.

You can register and get a free API key here - [Here]. The setup should be quite straight forward.

Here is a usage table of the free tier for your reference. We will be using the free tier as an example here.

| Tier | Requests per Day | Concurrent Request |
|------+------------------+--------------------|
| Free |                  | 1                  |

*** Basic setup and quick exploration

**** a) Install package

#+BEGIN_EXAMPLE
pip install quandl
#+END_EXAMPLE

**** b) Set up environment variable

Given that the free API is not a 'secret' secret. Putting the token in an environment variable would serve the purpose of this short example.

- Open your =~/.bashrc= and add the following line (Persistent)
  #+BEGIN_SRC bash
    # Inside .bashrc
    export QUANDL_TOKEN="YOUR_API_TOKEN"
  #+END_SRC

  #+BEGIN_SRC bash
    # In command line
    source ~/.bashrc
  #+END_SRC


- Or simply run in the command line (One off)
  #+BEGIN_SRC bash
    export QUANDL_TOKEN="YOUR_API_TOKEN"
  #+END_SRC

**** c) Quick demo

It is quite straight forward to get the data, just call it with the **stock code** ~HKEX/00005~ and ~quandl.get~.

#+BEGIN_SRC python
  import os
  import requests
  import pandas as pd
  import quandl
  import numpy as np

  pd.set_option('display.max_columns', None)
  quandl.ApiConfig.api_key = os.environ['QUANDL_TOKEN']

  num = 5     # HSBC
  code = str(num).zfill(5)
  code_str = "HKEX/{}".format(code)
  data = quandl.get(code_str, rows = 10)
  data['code'] = code

  print(data)

#+END_SRC

*** Getting data

Let's extend our example and try to get **all** the stocks in the past 10 days.

**** a) Get a list of all codes

As the list of all listed companies are likely to change, let's get the latest list from the HKEX page.

**** b) Rewrite get_code function

#+BEGIN_SRC python
#+END_SRC

**** c) Accept date parameters

**** d) Complete example

The complete code example can be founded - [[][Here]]

*** Setting a cron job

_
Reference
- Photo by [Chris Liverani](https://unsplash.com/@chrisliverani?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/stock?utm_source=unsplash&utm_medium=referral&utm_content=


*** Final Thoughts

With the example here, you should be able to get a daily udpate of HKEX stock data for analysis. It would be quite easy to save the data into a DBMS like mysql or postgresql too.

Happy Codding.


_

Reference:
- Reference Photo by []() on []()



** Python Cheatsheet                                           :python:workflow:
:PROPERTIES:
:EXPORT_FILE_NAME: python-cheatsheet
:EXPORT_DATE: 2021-06-17
:EXPORT_HUGO_MENU: :menu "main"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nolastmod true :cover https://storage.googleapis.com/billylkc-blog-image/images/posts/9-cheatsheet/thumbnails.jpg
:DESCRIPTION: Python Cheatsheet
:EXPORT_TITLE: Python Cheatsheet
:SUMMARY: Python Cheatsheet
:END:

Dont ask me about the syntax. I look it up on Google and API documentations. And now ~cht.sh~ too.

<!--more-->

*** Introduction

If you are having trouble to remember the exact syntax no matter how many times you've used it, you are not alone.

There is a community driven programming cheatsheet, so you can lookup the common usage of the function and it gives you a quick example to refresh your memories.

Introducing the ultimate programming cheatsheet - *cheat.sh* ([[https://cht.sh/][Official Site]]).
#+BEGIN_EXAMPLE
      _                _         _    __
  ___| |__   ___  __ _| |_   ___| |__ \ \      The only cheat sheet you need
 / __| '_ \ / _ \/ _` | __| / __| '_ \ \ \     Unified access to the best
| (__| | | |  __/ (_| | |_ _\__ \ | | |/ /     community driven documentation
 \___|_| |_|\___|\__,_|\__(_)___/_| |_/_/      repositories of the world

#+END_EXAMPLE

*** Why Cheatsheet
- **Straight to the point.** Quickly give you some useful code snippets.

- **Efficiency.** Stay in your editor while searching.

- **Easy context switching.** Extremely useful when you need to constantly switching between different programming languages. (e.g. Python, R, Spark, etc..)

*** Some Examples

1) Python group by lambda

   ~curl http://cht.sh/python/group+by+lambda~

   #+BEGIN_SRC python

     #  The apply method itself passes each "group" of the groupby object as
     #  the first argument to the function. So it knows to associate 'Weight'
     #  and "Quantity" to `a` and `b` based on position. (eg they are the 2nd
     #  and 3rd arguments if you count the first "group" argument.

     df = pd.DataFrame(np.random.randint(0,11,(10,3)), columns = ['num1','num2','num3'])
     df['category'] = ['a','a','a','b','b','b','b','c','c','c']
     df = df[['category','num1','num2','num3']]
     df

     category  num1  num2  num3
     0        a     2     5     2
     1        a     5     5     2
     2        a     7     3     4
     3        b    10     9     1
     4        b     4     7     6
     5        b     0     5     2
     6        b     7     7     5
     7        c     2     2     1
     8        c     4     3     2
     9        c     1     4     6

     gb = df.groupby('category')

     #  implicit argument is each "group" or in this case each category

     gb.apply(lambda grp: grp.sum())

     #  The "grp" is the first argument to the lambda function
     #  notice I don't have to specify anything for it as it is already,
     #  automatically taken to be each group of the groupby object

     category  num1  num2  num3
     category
     a             aaa    14    13     8
     b            bbbb    21    28    14
     c             ccc     7     9     9

     #  So apply goes through each of these and performs a sum operation

     print(gb.groups)
     {'a': Int64Index([0, 1, 2], dtype='int64'), 'b': Int64Index([3, 4, 5, 6], dtype='int64'), 'c': Int64Index([7, 8, 9], dtype='int64')}

     print('1st GROUP:\n', df.loc[gb.groups['a']])
     1st GROUP:
     category  num1  num2  num3
     0        a     2     5     2
     1        a     5     5     2
     2        a     7     3     4

     print('SUM of 1st group:\n', df.loc[gb.groups['a']].sum())

     SUM of 1st group:
     category    aaa
     num1         14
     num2         13
     num3          8
     dtype: object

     #  Notice how this is the same as the first row of our previous operation
     #
     #  So apply is _implicitly_ passing each group to the function argument
     #  as the first argument.
     #
     #  From the [docs](https://pandas.pydata.org/pandas-
     #  docs/stable/generated/pandas.core.groupby.GroupBy.apply.html)
     #
     #  > GroupBy.apply(func, *args, **kwargs)
     #  >
     #  > args, kwargs : tuple and dict
     #  >> Optional positional and keyword arguments to pass to func
     #
     #  Additional Args passed in "\*args" get passed _after_ the implicit
     #  group argument.
     #
     #  so using your code

     gb.apply(lambda df,a,b: sum(df[a] * df[b]), 'num1', 'num2')

     category
     a     56
     b    167
     c     20
     dtype: int64

     #  here 'num1' and 'num2' are being passed as _additional_ arguments to
     #  each call of the lambda function
     #
     #  So apply goes through each of these and performs your lambda operation

     # copy and paste your lambda function
     fun = lambda df,a,b: sum(df[a] * df[b])

     print(gb.groups)
     {'a': Int64Index([0, 1, 2], dtype='int64'), 'b': Int64Index([3, 4, 5, 6], dtype='int64'), 'c': Int64Index([7, 8, 9], dtype='int64')}

     print('1st GROUP:\n', df.loc[gb.groups['a']])

     1st GROUP:
     category  num1  num2  num3
     0        a     2     5     2
     1        a     5     5     2
     2        a     7     3     4

     print('Output of 1st group for function "fun":\n',
           fun(df.loc[gb.groups['a']], 'num1','num2'))

     Output of 1st group for function "fun":
     56

     #  [RSHAP] [so/q/47551251] [cc by-sa 3.0]

   #+END_SRC

2) R ggplot scatter

   ~curl http://cht.sh/r/ggplot2+scatter~

   #+BEGIN_SRC r

     # question_id: 7714677
     # One way to deal with this is with alpha blending, which makes each
     # point slightly transparent. So regions appear darker that have more
     # point plotted on them.
     #
     # This is easy to do in `ggplot2`:

     df <- data.frame(x = rnorm(5000),y=rnorm(5000))
     ggplot(df,aes(x=x,y=y)) + geom_point(alpha = 0.3)

     # ![enter image description here][1]
     #
     # Another convenient way to deal with this is (and probably more
     # appropriate for the number of points you have) is hexagonal binning:

     ggplot(df,aes(x=x,y=y)) + stat_binhex()

     # ![enter image description here][2]
     #
     # And there is also regular old rectangular binning (image omitted),
     # which is more like your traditional heatmap:

     ggplot(df,aes(x=x,y=y)) + geom_bin2d()

     # [1]: http://i.stack.imgur.com/PJbMn.png
     # [2]: http://i.stack.imgur.com/XyWw1.png
     #
     # [joran] [so/q/7714677] [cc by-sa 3.0]

   #+END_SRC

   #+attr_html: :width 250px
   [[http://i.stack.imgur.com/PJbMn.png]]

   #+attr_html: :width 250px
   [[http://i.stack.imgur.com/XyWw1.png]]

3) PySpark dataframe filter

   ~curl http://cht.sh/pyspark/filter~

   #+BEGIN_SRC python

     /*
      * Pyspark: Filter dataframe based on multiple conditions
      *
      * <!-- language-all: lang-python -->
      *
      * Your logic condition is wrong. IIUC, what you want is:
      */

     import pyspark.sql.functions as f

     df.filter((f.col('d')<5))\
         .filter(
             ((f.col('col1') != f.col('col3')) |
              (f.col('col2') != f.col('col4')) & (f.col('col1') == f.col('col3')))
         )\
         .show()

     /*
      * I broke the filter() step into 2 calls for readability, but you could
      * equivalently do it in one line.
      *
      * Output:
      */

     +----+----+----+----+---+
     |col1|col2|col3|col4|  d|
     +----+----+----+----+---+
     |   A|  xx|   D|  vv|  4|
     |   A|   x|   A|  xx|  3|
     |   E| xxx|   B|  vv|  3|
     |   F|xxxx|   F| vvv|  4|
     |   G| xxx|   G|  xx|  4|
     +----+----+----+----+---+

     /* [pault] [so/q/49301373] [cc by-sa 3.0] */

   #+END_SRC

*** My Workflow

- Have my emacs setup with left pane as **code** and right pane as **command line console**

- Set up **alias** to run go and python program with less keystrokes
  - alias ~pp~ as ~python main.py~
  - alias ~gg~ as ~go run main.go~

- Created an **utility** command line program and alias to quickly call cheatsheet with ~chp sth~ (~curl http://cht.sh/python/sth~) and ~chg sth~ (~curl http://cht.sh/go/sth~)

*** Demo

Quick demo to create a dummy python dataframe
[[https://storage.googleapis.com/billylkc-blog-image/images/posts/9-cheatsheet/cheatsheet_quick.gif]]

*** Final Thoughts

Hopefully you find it useful too. \\
Happy Coding!


_

Reference
- Reference Photo by [cottonbro](https://www.pexels.com/@cottonbro?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels) on [Pexels](https://www.pexels.com/photo/white-printer-paper-on-brown-round-table-7128752/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels)


** Docstrings                                                       :python:
:PROPERTIES:
:EXPORT_FILE_NAME: docstrings
:EXPORT_DATE: 2021-06-19
:EXPORT_HUGO_MENU: :menu "main"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nolastmod true :cover https://storage.googleapis.com/billylkc-blog-image/images/posts/10-docstrings/thumbnails.jpg
:DESCRIPTION: What is docstrings?
:EXPORT_TITLE: What is docstrings?
:SUMMARY:  What is docstrings?
:END:

Code is more often read than written.

<!--more-->

*** Introduction

Learn to write a good function documentation.

Even if you don’t intend anybody else to read your code, there’s still a very good chance that somebody will have to stare at your code and figure out what it does. That person is probably going to be you too, twelve months from now. So be kind to yourself, and start writing some good code and documentation.

Docstrings are the string literals that appear right after the definition of a function, method, class, or module. To me, it is like **a summary of what a function does**. Sometimes I just dont care what the actual implementation is (At first at least 🙂), just tell me what the input, output, and a short descriptin of what it does, before even asking me to have a look at your code.

Let's have a look at the examples in different languages.

*** Python Docstrings
**** a) One-liner docstring

Use short one-liner description for functions that you think is intuitive.
But always always write a docstings for your functions.

#+BEGIN_SRC python
  def square(n):
      """ Takes an integer and return a square of it """
      return n**2
#+END_SRC

**** b) Detailed docstring

Make sure to make it clear that what is the **input** and **output** of your function, and more importantly is to include the **type** as well.
I usually include the followings.

- Description
- Arguments with types
- Return value
- (Optional) Detailed steps
- (Optional) Example and output


#+BEGIN_SRC python
  from datetime import datetime
  from dateutil.rrule import rrule, MONTHLY
  from typing import List

  def get_months_between_dates(start: str, end:str) -> List:

      """
      Return a list of months between two dates in YYYYMM format.
      Use to convert from some start end date to a list of months

      Args:
               start (str): Start date in YYYYMM format
               end (str): End date in YYYYMM format

      Returns:
               month_list ([]str): A list of month between the two months input (Inclusive)

      Example:
               month_list = get_months_between_dates('201802', '201902')

      Example output:
               ['201802', '201803', '201804', '201805', '201806', '201807', '201808', '201809', '201810', '201811', '201812', '201901', '201902']
      """

      start_dt = datetime.strptime(start, "%Y%m")
      end_dt   = datetime.strptime(end, "%Y%m")
      month_list = [dt.strftime("%Y%m") for dt in rrule(MONTHLY, dtstart=start_dt, until=end_dt)]
      return month_list

#+END_SRC

*** R Docstrings

For R, I find that the standard documentation format is kinda hard to read (personal preference), so I follow the python docstring format as well.

One of the draw back would be you cant read the documentation from the ~help~ function natively supported by R. But it gives you a more consistent feel between Python and R projects.


#+BEGIN_SRC r
  library(data.table)
  round_dataframe <- function(df, digits = 2) {

    ## Round the numeric columns of the provided dataframe
    ##
    ## Args:
    ##  df (Dataframe): Dataframe to be rounded
    ##  digits (num): No of digits to be rounded for numeric columns
    ##
    ## Returns:
    ##  df (Dataframe): Dataframe with rounded numbers
    ##
    ## Example:
    ##  dt = as.data.table(iris)
    ##  dt = round_dataframe(df = dt, digits = 0)

    # Find numeric cols, round the columns with no of digits provided
    numeric.cols = colnames(Filter(is.numeric, df))
    df[, (numeric.cols) := round(.SD, digits), .SDcols = numeric.cols]

    return(df)
  }

#+END_SRC

Reference: [[https://style.tidyverse.org/
][R tidyverse style guide]]

*** Go Docstrings

For Go, you can easily tell from the function signature about the input, output and description of the function.
It also comes with some built-in support for documentation. You can easily generate the doc with ~go doc --all~ or ~godoc -http=localhost:7000~.


#+BEGIN_SRC go

  // Add simply adds the two integers together
  func Add(x int, y int) int{
          return x + y
  }

#+END_SRC

*** Demo

Writing docstrings might sound a lot of trouble at first. But it may not be as much as you think. Many modern IDE support some code snippets for you to define a template for code generation.

Here is a quick demo on how I usually generate the docstrings with yasnippet. I group all my snippets starting with the letter ~s~ for snippets.
- ~sifm~ prints the ~if __name__ == '__main__'~
- ~sfn~ stands for snippet function, which generate a docstring snippet whenever I define a function.

[[https://storage.googleapis.com/billylkc-blog-image/images/posts/10-docstrings/docstrings-o.gif]]

*** Final Thoughts

Hopefully, you start to see the benefits of writing a good function signature after this post. \\
Happy Coding!

_

Reference Photo by [Gustavo Fring](https://www.pexels.com/@gustavo-fring?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels) on [Pexels](https://www.pexels.com/photo/clever-little-student-writing-in-notebook-while-studying-at-home-3874375/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels)



** TODO Empty template
:PROPERTIES:
:EXPORT_FILE_NAME: file-name
:EXPORT_DATE: 2021-02-22
:EXPORT_HUGO_MENU: :menu "main"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nolastmod true :cover https://storage.googleapis.com/billylkc-blog-image/images/posts/4-functional-options/thumbnails.jpg
:DESCRIPTION: description
:EXPORT_TITLE: description
:SUMMARY: description
:END:

Some short description

<!--more-->
