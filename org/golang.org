#+STARTUP: content
#+OPTIONS: \n:t
#+OPTIONS: ^:{}
#+HTML_HEAD: <base target="_blank">
#+hugo_base_dir: ../
#+hugo_section: ./posts

#+hugo_weight: auto
#+hugo_auto_set_lastmod: t

#+author: Billy Lam

* golang                                                              :@golang:golang:

** Static site crawling with goq                            :golang:crawler:
:PROPERTIES:
:EXPORT_FILE_NAME: static-site-crawling-with-goq
:EXPORT_DATE: 2021-02-28
:EXPORT_HUGO_MENU: :menu "main"
:EXPORT_HUGO_WEIGHT: 40
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nolastmod true :cover https://storage.googleapis.com/billylkc-blog-image/images/posts/5-goq/thumbnails.jpg
:DESCRIPTION:  Static site crawling with goq. Goquery example.
:EXPORT_TITLE: Static site crawling with goq
:SUMMARY: Static site crawling with goq
:END:

Easy static site crawling with goq

<!--more-->
*** Usage

Basically, what you have to do is 3 things.
- Study the **static page** (Not dynamically loaded content with javascript) and identify the elements with css selector
- Construct a golang struct with the goquery tag (e.g. ~`goquery:"div p`"~)
- Decode into a struct with ~goq.NewDecorder~

*** Static site crawling

Here I will be using a scraping friendly website ([[http://example.com/][example.com]]), and capture the header ~h1~ and the following paragraph =div p=.

#+begin_src go :imports "fmt"
  package main

  import (
      "encoding/json"
      "fmt"
      "log"
      "net/http"

      "astuart.co/goq"
  )

  // Example as a struct to capture data from example.com
  type Example struct {
      Title     string `goquery:"h1"`
      Paragraph string `goquery:"div p"`
  }

  func main() {
      res, err := http.Get("https://example.com/")
      if err != nil {
              log.Fatal(err)
      }
      defer res.Body.Close()

      var example Example

      err = goq.NewDecoder(res.Body).Decode(&example)
      if err != nil {
              log.Fatal(err)
      }

      fmt.Println(PrettyPrint(example))
  }

  // PrettyPrint to print struct in a readable way
  func PrettyPrint(i interface{}) string {
          s, _ := json.MarshalIndent(i, "", "\t")
          return string(s)
  }
#+end_src

*** Result

#+begin_src go :imports "fmt"
  {
      "Title": "Example Domain",
      "Paragraph": "This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.More information..."
  }


#+end_src


*** Other Demo
The following demos are strictly for illustration purposes. Do check the =robots.txt= file of each site and crawl responsibly.

**** a) Wikipedia

Let say we want to create a program that will retrieve the first 3 paragraphs of the keyword (e.g. Linear regression) that we provide. Here are some key steps.

1. Study the **css selector** of the info that we need

   Right Click on the paragraph -> Inspect -> Properties -> css selector
   [[https://storage.googleapis.com/billylkc-blog-image/images/posts/5-goq/css-selector.png]]

2. Create a **struct** with the **goquery tag**

   We can easily check that the header is =h1= and detailed descriptions =div.mw-parser-output p= and it should return a list of strings
   #+begin_src go :imports "fmt"
     type Wiki struct {
         Title   string   `goquery:"h1"`
         Content []string `goquery:"div.mw-parser-output p"`
     }
   #+end_src

3. **Decode** into Go struct with the GET response
   #+begin_src go :imports "fmt"
     // wiki gets the wikipedia link
     func wiki(keyword string) Wiki {

         // construct wiki links
         link := fmt.Sprintf("https://en.wikipedia.org/wiki/%s", keyword)
         res, err := http.Get(link)
         if err != nil {
                 fmt.Println(err)
         }
         defer res.Body.Close()

         var wiki Wiki
         err = goq.NewDecoder(res.Body).Decode(&wiki)
         if err != nil {
                 fmt.Println(err)
         }

         return wiki
     }

   #+end_src

4. Print the output
   #+begin_src go :imports "fmt"
     package main

     import (
         "encoding/json"
         "fmt"
         "log"
         "net/http"

         "astuart.co/goq"
     )

     func main() {
         kw := "Logistic Regression"
         w := wiki(kw)

         if len(w.Content) >= 3 {
                 w.Content = w.Content[0:3]
         }
         fmt.Println(w)
    }
   #+end_src

5. Demo

#+ATTR_HTML: target="_blank"
[[https://storage.googleapis.com/billylkc-blog-image/images/posts/5-goq/goq-wiki-o.gif]]

Full Example

You can find out the full code example - [[https://github.com/billylkc/blogposts/blob/4_goq_wiki/main.go][Here]]

**** b) OpenRice
Similarly for OpenRice. You can easily check that the css selector for title would be =div.cms-detail-title.or-font-family= and content as =div.cms-detail-body-text div=.

Full code
#+begin_src go :imports "fmt"
  package main

  import (
      "encoding/json"
      "fmt"
      "net/http"

      "astuart.co/goq"
  )
  // Article as a struct to parse Openrice Article
  type Article struct {
      Title   string   `goquery:"div.cms-detail-title.or-font-family"`
      Content []string `goquery:"div.cms-detail-body-text div"`
  }


  func main() {
          // Random promotion link from the front page. May be going to be expired
          link := "https://www.openrice.com/zh/hongkong/promo/%E3%80%90%E7%B5%82%E6%96%BC%E7%B4%84friend%E9%A3%9F%E9%A3%AF%E3%80%91%E5%B0%96%E6%B2%99%E5%92%80%E4%B8%BB%E6%89%93%E9%A3%B2%E9%85%92%E6%B5%B7%E9%AE%AE-outdoor%E4%BD%8D%E6%9C%89%E6%B0%A3%E6%B0%9B-a5816"
          result := getArticle(link)

          fmt.Println(PrettyPrint(result))
  }

  // PrettyPrint to print struct in a readable way
  func PrettyPrint(i interface{}) string {
          s, _ := json.MarshalIndent(i, "", "\t")
          return string(s)
  }

  // getArticle parses the input link and extract the content of the article
  // We are passing the link as argument this time
  func getArticle(link string) Article {
          res, err := http.Get(link)
          if err != nil {
                  fmt.Println(err)
          }
          defer res.Body.Close()

          var rice Article
          err = goq.NewDecoder(res.Body).Decode(&rice)
          if err != nil {
                  fmt.Println(err)
          }

          return rice
  }

#+end_src


Result (Partial)
#+begin_src json
  {
          "Title": "【終於約Friend食飯】尖沙咀主打飲酒海鮮　Outdoor位有氣氛",
          "Content": [
                  "好耐無同朋友夜晚食飯傾計喇！久違咁耐嘅晚餐，梗係想搵個舒服地方飲吓酒、食好嘢啦，尖沙咀呢間樓上餐廳Poseidon 就有個戶外大平台，可以Chill 住睇夜景食飯；室內亦有舒服卡位、高凳位、煙霧特效座位。",
                  "",
                  "餐廳有駐場調酒師，多款啤酒、紅白酒、雞尾酒可以飲成晚。最正係大廚會定期引入Seasonal 靚食材推新菜式，記住飲酒都要留肚食好嘢呀。",
                  "",
                  "同場有卡位、高凳同戶外位揀。",
                  "",
                  "",
                  "煙霧特效座位好有氣氛。",
                  "",
                  "人氣招牌菜　海鮮拼盤",
                  "呢度一向主打靚食材，食靚嘢點少得海鮮，所以呢個「海鮮拼盤」一直好有人氣！今次新Menu 繼續有新鮮即開生蠔、雞尾凍蝦、翡翠螺、青口、蝦，新引入超鮮甜花甲，任沾泰式辣醬、紅酒醋、雞尾酒醬3款醬汁，有2人份或4人份揀。",
                  "",
                  "想食得盡興啲，都可以追加特級鱘魚魚子醬、波士頓龍蝦，會同其他海鮮一齊放喺貝殼大碟上枱，影相一流。",
                  "",
                  "貝殼大碟上枱超靚。"
        ]
  }
#+end_src

Here is the source code - [[https://github.com/billylkc/blogposts/blob/5_goq_openrice/main.go][Here]]


*** Final thoughts

I have used many packages in Python and Go, this is by far the easiest package for simple static site crawling. You just need to define a goquery tag in the struct, then Voila, you get your content.

Happy Coding!


_

_Reference_
- [[https://github.com/andrewstuart/goq][andrewstuart/goq]]
- Photo by [Jean Carcallas](https://unsplash.com/@jean8carcallas?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/capture?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)



** Functional Options in Go                                         :golang:
:PROPERTIES:
:EXPORT_FILE_NAME: functional-options-in-go
:EXPORT_DATE: 2021-02-22
:EXPORT_HUGO_MENU: :menu "main"
:EXPORT_HUGO_WEIGHT: 100
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nolastmod true :cover https://storage.googleapis.com/billylkc-blog-image/images/posts/4-functional-options/thumbnails.jpg
:DESCRIPTION: Functional Options in Go
:EXPORT_TITLE: Functional Options in Go
:SUMMARY: Functional Options in Go
:END:

A nice way to set options in Go

<!--more-->

*** Functional Option
#+begin_src go :imports "fmt"
  package main

  import (
      "encoding/json"
      "fmt"
      "time"
  )

  type Foo struct {
      Code      int
      Verbosity int
      Timeout   time.Duration // In nanoseconds
  }

  type option func(*Foo)

  func main() {
      fmt.Println("Demo for option chain")
      foo := New(5)

      fmt.Println("Before")
      fmt.Println(PrettyPrint(foo))

      fmt.Println("After")
      foo.Option(Verbosity(-1))     // Set verbosity
      foo.Option(SetTimeout("10s")) // Set timeout to 10 sec

      fmt.Println(PrettyPrint(foo))
  }

  func New(code int) Foo {
      return Foo{
          Code: code,
      }
  }

  // Option sets the options specified.
  func (f *Foo) Option(opts ...option) {
      for _, opt := range opts {
          opt(f)
      }
  }

  // Verbosity sets Foo's verbosity level to v.
  func Verbosity(v int) option {
      return func(f *Foo) {
          f.Verbosity = v
      }
  }

  // SetTimeout sets timeout using ParseDuration
  // input is like 5s, 1m, etc
  func SetTimeout(t string) option {
      timeout, _ := time.ParseDuration(t)
      return func(f *Foo) {
          f.Timeout = timeout
      }
  }

  // PrettyPrint to print struct in a readable way
  func PrettyPrint(i interface{}) string {
      s, _ := json.MarshalIndent(i, "", "\t")
      return string(s)
  }
#+end_src

*** Results

#+begin_src go :imports "fmt"
  // Demo for option chain

  // Before
  // {
  //         "Code": 5,
  //         "Verbosity": 0,
  //         "Timeout": 0
  // }
  // After
  // {
  //         "Code": 5,
  //         "Verbosity": -1,
  //         "Timeout": 10000000000
  // }
#+end_src

You can find the complete working example in - [[https://github.com/billylkc/blogposts/tree/3_go_functional_options][Here]]

Reference: [[https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html][Self-referential functions and the design of options]]

** Parse JSON API response in Go                                :golang:api:
:PROPERTIES:
:EXPORT_FILE_NAME: parse-json-api-response-in-Go
:EXPORT_DATE: 2021-02-08
:EXPORT_HUGO_MENU: :menu "main"
:EXPORT_HUGO_WEIGHT: 80
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nolastmod true :cover https://storage.googleapis.com/billylkc-blog-image/images/posts/parse-json.jpg
:DESCRIPTION: Parse JSON API response in Go
:EXPORT_TITLE: Parse JSON API response in Go
:SUMMARY: Parse JSON API response in Go
:END:

Parse HTTP API response easily

<!--more-->

*** Introduction
When you are hosting your model result as a micro-services, or scrapping data from websites, you will often find yourself working on some Restful API JSON object. In this post, I will show you how easily we can work with JSON data in Go.

*** Overview
1. Get JSON response from sample API hosting site - reqres
2. Generate go struct from the response - json-to-go
3. Unmarshal JSON response to go struct
4. Loop through the struct and print data from the result

*** Get Requests

#+begin_src go :imports "fmt"
  package main

  import (
      "fmt"
      "io/ioutil"
      "net/http"
  )

  func main() {
      resp, err := http.Get("https://reqres.in/api/users?page=2")
      if err != nil {
              fmt.Println("No response from request")
      }
      defer resp.Body.Close()
      body, err := ioutil.ReadAll(resp.Body) // response body is []byte
      fmt.Println(string(body))              // convert to string before print
  }

#+end_src



*** Result JSON

#+BEGIN_SRC json
{"page":2,"per_page":6,"total":12,"total_pages":2,"data":[{"id":7,"email":"michael.lawson@reqres.in","first_name":"Michael","last_name":"Lawson","avatar":"https://reqres.in/img/faces/7-image.jpg"},{"id":8,"email":"lindsay.ferguson@reqres.in","first_name":"Lindsay","last_name":"Ferguson","avatar":"https://reqres.in/img/faces/8-image.jpg"},{"id":9,"email":"tobias.funke@reqres.in","first_name":"Tobias","last_name":"Funke","avatar":"https://reqres.in/img/faces/9-image.jpg"},{"id":10,"email":"byron.fields@reqres.in","first_name":"Byron","last_name":"Fields","avatar":"https://reqres.in/img/faces/10-image.jpg"},{"id":11,"email":"george.edwards@reqres.in","first_name":"George","last_name":"Edwards","avatar":"https://reqres.in/img/faces/11-image.jpg"},{"id":12,"email":"rachel.howell@reqres.in","first_name":"Rachel","last_name":"Howell","avatar":"https://reqres.in/img/faces/12-image.jpg"}],"support":{"url":"https://reqres.in/#support-heading","text":"To keep ReqRes free, contributions towards server costs are appreciated!"}}
#+END_SRC

*** Convert JSON response
You can go to this site - [[https://mholt.github.io/json-to-go/][JSON to go]] to convert JSON response to Go struct very easily.

[[https://storage.googleapis.com/billylkc-blog-image/images/posts/2-parse-json-json-to-go.png]]

*** Unmarshal JSON to Go struct
You can then unmarshal the ~[]byte~ from the GET response to the ~Response~ struct that we just auto-generated

#+begin_src go :imports "fmt"
  // Generated go struct
  type Response struct {
      Page       int `json:"page"`
      PerPage    int `json:"per_page"`
      Total      int `json:"total"`
      TotalPages int `json:"total_pages"`
      Data       []struct {
              ID        int    `json:"id"`
              Email     string `json:"email"`
              FirstName string `json:"first_name"`
              LastName  string `json:"last_name"`
              Avatar    string `json:"avatar"`
      } `json:"data"`
      Support struct {
              URL  string `json:"url"`
              Text string `json:"text"`
      } `json:"support"`
  }

  // snippet only
  var result Response
  if err := json.Unmarshal(body, &result); err != nil {   // Parse []byte to go struct pointer
          fmt.Println("Can not unmarshal JSON")
  }
  fmt.Println(PrettyPrint(result))
#+end_src

Response struct preview (partial)
#+begin_src go :imports "fmt"
  {
      "page": 2,
      "per_page": 6,
      "total": 12,
      "total_pages": 2,
      "data": [
          {
              "id": 7,
                  "email": "michael.lawson@reqres.in",
                  "first_name": "Michael",
                  "last_name": "Lawson",
                  "avatar": "https://reqres.in/img/faces/7-image.jpg"
          },
              {
              "id": 8,
                  "email": "lindsay.ferguson@reqres.in",
                  "first_name": "Lindsay",
                  "last_name": "Ferguson",
                  "avatar": "https://reqres.in/img/faces/8-image.jpg"
          }
      ]
  }
#+end_src

Finally loop through the data node and print out the FirstName of the result
#+begin_src go :imports "fmt"
  // Loop through the data node for the FirstName
  for _, rec := range result.Data {
      fmt.Println(rec.FirstName)
  }
#+end_src

*** Complete code
#+begin_src go
  package main

  import (
      "encoding/json"
      "fmt"
      "io/ioutil"
      "net/http"
  )

  type Response struct {
      Page       int `json:"page"`
      PerPage    int `json:"per_page"`
      Total      int `json:"total"`
      TotalPages int `json:"total_pages"`
      Data       []struct {
              ID        int    `json:"id"`
              Email     string `json:"email"`
              FirstName string `json:"first_name"`
              LastName  string `json:"last_name"`
              Avatar    string `json:"avatar"`
      } `json:"data"`
      Support struct {
             URL  string `json:"url"`
             Text string `json:"text"`
      } `json:"support"`
  }

  func main() {

      // Get request
      resp, err := http.Get("https://reqres.in/api/users?page=2")
      if err != nil {
              fmt.Println("No response from request")
      }
      defer resp.Body.Close()
      body, err := ioutil.ReadAll(resp.Body) // response body is []byte

      var result Response
      if err := json.Unmarshal(body, &result); err != nil {  // Parse []byte to the go struct pointer
              fmt.Println("Can not unmarshal JSON")
      }

      // fmt.Println(PrettyPrint(result))

      // Loop through the data node for the FirstName
      for _, rec := range result.Data {
              fmt.Println(rec.FirstName)
      }
  }

  // PrettyPrint to print struct in a readable way
  func PrettyPrint(i interface{}) string {
      s, _ := json.MarshalIndent(i, "", "\t")
      return string(s)
  }
#+end_src

You can find the complete working example in - [[https://github.com/billylkc/blogposts/blob/1_json_api/main.go][Here]]

*** Demo
[[https://storage.googleapis.com/billylkc-blog-image/images/posts/2-parse-json-demo.gif]]


Reference Photo by [Goran Ivos](https://unsplash.com/@goran_ivos?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/programming?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)


** Why golang?                                                      :golang:
:PROPERTIES:
:EXPORT_FILE_NAME: why-golang
:EXPORT_DATE: 2021-02-03
:EXPORT_HUGO_MENU: :menu "main"
:EXPORT_HUGO_WEIGHT: 60
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nolastmod true :cover https://storage.googleapis.com/billylkc-blog-image/images/posts/why-go.png
:DESCRIPTION: Why Golang?
:EXPORT_TITLE: Why Golang?
:SUMMARY: Why Golang?
:END:

You can find a lot of reasons why people are using Golang. And here is my list.

<!--more-->

*** Creators
#+BEGIN_QUOTE
Imagine you are having not one, but a couple of yodas in computer science to work on the same language.
#+END_QUOTE

+ **Robert Griesemer** - V8 JavaScript engine, Java HotSpot virtual machine
+ **Rob Commander Pike** - Co-creator of UTF-8, Plan 9 from Bell Labs
+ **Ken Thompson** - Designed original Unix system, Invented direct predecessor to C language, Co-creator of UTF-8

I am not saying nothing could go wrong with this team, but this is good enough for me to check the language out.



*** Purpose of the Project
#+BEGIN_QUOTE
Go was designed to address the problems faced in large scale software development, with concurrency
and maintainability built in its core.
#+END_QUOTE

When Go launched, some claimed it was missing particular features or methodologies that were regarded as de rigueur for a modern language. \\

How could Go be worthwhile in the absence of these facilities? Our answer to that is that the properties Go does have address the issues that make large-scale software development difficult. These issues include: \\

- slow builds
- uncontrolled dependencies
- each programmer using a different subset of the language
- poor program understanding (code hard to read, poorly documented, and so on)
- duplicate of effort
- cost of updates
- version skew
- difficulty of writing automatic tools
- cross-language builds

Individual features of a language don't address these issues. A larger view of software engineering is required, and in the design of Go we tried to focus on solutions to these problems.

Reference: [[https://golang.org/doc/faq#What_is_the_purpose_of_the_project][Go Frequently Asked Questions]]


*** Gopher
#+BEGIN_QUOTE
Gopher is the best representation of the language imo.
It's simple, it's fun. It helps me solve complex problems with simple solutions.
#+END_QUOTE

#+attr_html: :width 250px
#+attr_latex: :width 250px
[[https://storage.googleapis.com/billylkc-blog-image/images/posts/why-go-gopher.jpg]]



*** Developer Productivity
#+BEGIN_QUOTE
Having the expressiveness of dynamic languages, with the performance of compiled languages.
#+END_QUOTE

Golang is fast. And it is not just about the performance and compilation time. It also provides all kinds of features and tools for the developers to be more productive.


Here are some reasons that I think Golang stands out in terms of developers' productivity.

**** a) Public vs Private function
Does it bothers you when you first started learning Java with public static void without really knowing what it means?

Instead of using a =public/private= keyword, Go uses initial letter of the identifier to determine the visibility.

- **upper case initial letter**: Name is visible to clients of package
- **otherwise**: name (or _Name) is not visible to clients of package

#+begin_src go :imports "fmt"
  package hello

  import "fmt"

  // hello as some private function
  // Not visible outside of the package
  func hello() {
      fmt.Println("I am a private function")
  }

  // SayHello is a public function
  // As the func name is starting with Capital letter
  func SayHello() {
      fmt.Println("I am a public function")
  }
#+end_src

**** b) Documentation
You can generate a package documentation in the command line with src_sh[:exports code]{go doc --all}

#+ATTR_HTML: :style border:2px solid #ccc;
[[https://storage.googleapis.com/billylkc-blog-image/images/posts/why-go-go-doc.png]]

or html format with ~godoc -http=localhost:7000~

#+ATTR_HTML: :style border:2px solid black;
[[https://storage.googleapis.com/billylkc-blog-image/images/posts/why-go-go-doc-2.png]]

**** c) go fmt
#+BEGIN_QUOTE
Gofmt's style is no one's favorite, yet gofmt is everyone's favorite.

-Rob Pike
#+END_QUOTE

With Go, it takes an unusual approach and let the machine take care of the most controversial formatting issues.

Less time can be spent on the discussion on whether 2 spaces or 4 spaces or tab or vertical comments alignment should be used. It also makes you feel 'consistent' to read code written by others.

_Auto formatting on save with go fmt_
[[https://storage.googleapis.com/billylkc-blog-image/images/posts/why-go-go-fmt.gif]]

**** d) Compiled Language

Because Go compiles so fast, it gives you the benefit of a compiled language (type checking, efficiency, etc..) and makes you feel like writing in an interpreted language as well.

Here is an example of how you can be benefit from a compiler (Easier to detect error and restructure code, etc..).

Function Signature checking
[[https://storage.googleapis.com/billylkc-blog-image/images/posts/why-go-compile.gif]]


*** Companies using Golang
#+BEGIN_QUOTE
Why Golang? It is battle tested.
#+END_QUOTE

Many big companies are using Go programming language in various projects and services due to its scalability, superior error check, and concurrency. Here are some big companies which are using Golang:

- Google
- Uber
- Netflix
- Alibaba
- Twitch
- Dropbox
- Medium
- SoundCloud


Reference: [[https://github.com/golang/go/wiki/GoUsers][Companies using Go]]

*** Developer Survey

In February 2020 StackOverflow conducted a survey with nearly 65,000 developers on how they learn and level up, which tools they’re using, and what they want. Here are some take aways on Golang.



- In terms of Median Salary versus Experience. Golang programers are doing AOkay. (Possible bias of the big pay-roll in larger companies though)
  #+CAPTION: Stackoverflow survey - Golang
  [[https://storage.googleapis.com/billylkc-blog-image/images/posts/why-go-survey-1.png]]
  {Remarks: The survey was taken in February 2020, before COVID-19 was declared a pandemic by the World Health Organization and before the virus impacted every country in the world.}

- For the most loved language, we see a big gain in Go, moving up to 5th (2020) from 10th (2019).
  [[https://storage.googleapis.com/billylkc-blog-image/images/posts/why-go-survey-2.png]]


- And for the most dreaded language, Go is amongst the last few, which is always a good sign.
  [[https://storage.googleapis.com/billylkc-blog-image/images/posts/why-go-survey-3.png]]


Reference: [[https://insights.stackoverflow.com/survey/2020][2020 Stack Overflow Developer Survey]]

*** What about Data science
#+BEGIN_QUOTE
Nothing. Who says everything is about DS.
#+END_QUOTE

Just kidding 🙂. The truth is data science will not be the main focus of Go in near future. It is being more widely used in areas like, DevOps, Cloud architecture, web development, API/RPC services, etc..


I do find Go very easy to use for data scraping and hosting API.



*** Final Thoughts
Some final thoughts


** TODO Empty template
:PROPERTIES:
:EXPORT_FILE_NAME: file-name
:EXPORT_DATE: 2021-02-22
:EXPORT_HUGO_MENU: :menu "main"
:EXPORT_HUGO_WEIGHT: 1000
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nolastmod true :cover https://storage.googleapis.com/billylkc-blog-image/images/posts/4-functional-options/thumbnails.jpg
:DESCRIPTION: description
:EXPORT_TITLE: description
:SUMMARY: description
:END:

Some short description

<!--more-->
